from fastapi import FastAPI, HTTPException, Query
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy import create_engine, Column, Integer, String, Float, DateTime, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session
from pydantic import BaseModel
from typing import List, Optional, Dict
from datetime import datetime
import json
import os
import bcrypt
import mysql.connector
from fastapi import Depends

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

DATABASE_URL = "mysql+mysqlconnector://user:password@localhost/rental_db"
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

class User(Base):
    __tablename__ = "users"
    user_id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, index=True)
    password_hash = Column(String)
    role = Column(String)
    email = Column(String)

class Property(Base):
    __tablename__ = "properties"
    property_id = Column(Integer, primary_key=True, index=True)
    name = Column(String)
    address = Column(String)
    submarket = Column(String)
    bedrooms = Column(Integer)
    square_footage = Column(Float)
    current_rent = Column(Float)
    occupancy_rate = Column(Float)
    available_units = Column(Integer)
    amenities = Column(String)

class Lease(Base):
    __tablename__ = "leases"
    lease_id = Column(Integer, primary_key=True, index=True)
    property_id = Column(Integer, ForeignKey("properties.property_id"))
    effective_rent = Column(Float)
    term_months = Column(Integer)
    start_date = Column(DateTime)
    discount = Column(Float)

class Booking(Base):
    __tablename__ = "bookings"
    booking_id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.user_id"))
    property_id = Column(Integer, ForeignKey("properties.property_id"))
    booking_date = Column(DateTime)
    status = Column(String)

class PeerProperty(Base):
    __tablename__ = "peer_properties"
    peer_id = Column(Integer, primary_key=True, index=True)
    property_id = Column(Integer, ForeignKey("properties.property_id"))
    peer_submarket = Column(String)
    peer_rent = Column(Float)
    peer_occupancy = Column(Float)
    peer_bedrooms = Column(Integer)

Base.metadata.create_all(bind=engine)

class PricingConfig:
    def __init__(self):
        config_path = os.path.join(os.getcwd(), "pricing_config.json")
        with open(config_path, "r") as f:
            data = json.load(f)
            self.weight_market_trend = data["WeightMarketTrend"]
            self.weight_occupancy = data["WeightOccupancy"]
            self.weight_peer_rent = data["WeightPeerRent"]
            self.auto_accept_threshold_daily = data["AutoAcceptThresholdDaily"]
            self.auto_accept_threshold_weekly = data["AutoAcceptThresholdWeekly"]
            self.min_rent_multiplier = data["MinRentMultiplier"]
            self.max_rent_multiplier = data["MaxRentMultiplier"]

class RegisterDto(BaseModel):
    username: str
    password: str
    email: str

class LoginDto(BaseModel):
    username: str
    password: str

class PropertyDto(BaseModel):
    name: str
    address: str
    submarket: str
    bedrooms: int
    square_footage: float
    current_rent: float
    occupancy_rate: float
    available_units: int
    amenities: str

class BookingDto(BaseModel):
    user_id: int
    property_id: int

class LeaseDto(BaseModel):
    property_id: int
    effective_rent: float
    term_months: int
    start_date: datetime
    discount: float

class PeerPropertyDto(BaseModel):
    property_id: int
    peer_submarket: str
    peer_rent: float
    peer_occupancy: float
    peer_bedrooms: int

class PriceRecommendation(BaseModel):
    property_id: int
    recommended_rent: float
    base_rent: float
    is_auto_accepted: bool
    lease_expiration_adjustments: Dict[int, float]
    market_trend_factor: float
    occupancy_factor: float
    peer_rent_factor: float

@app.post("/api/auth/register")
async def register(dto: RegisterDto, db: Session = Depends(get_db)):
    if db.query(User).filter(User.username == dto.username).first():
        raise HTTPException(status_code=400, detail="Username already exists")
    
    hashed_password = bcrypt.hashpw(dto.password.encode('utf-8'), bcrypt.gensalt())
    user = User(
        username=dto.username,
        password_hash=hashed_password.decode('utf-8'),
        role="Landlord",
        email=dto.email
    )
    db.add(user)
    db.commit()
    db.refresh(user)
    return {"user_id": user.user_id, "username": user.username}

@app.post("/api/auth/login")
async def login(dto: LoginDto, db: Session = Depends(get_db)):
    user = db.query(User).filter(User.username == dto.username).first()
    if not user or not bcrypt.checkpw(dto.password.encode('utf-8'), user.password_hash.encode('utf-8')):
        raise HTTPException(status_code=401, detail="Invalid credentials")
    return {"user_id": user.user_id, "username": user.username, "role": user.role}

@app.get("/api/properties")
async def get_properties(
    submarket: Optional[str] = None,
    bedrooms: Optional[int] = None,
    sort_by: str = "price",
    sort_order: str = "asc",
    page: int = Query(1, ge=1),
    page_size: int = Query(10, ge=1),
    db: Session = Depends(get_db)
):
    query = db.query(Property)
    
    if submarket:
        query = query.filter(Property.submarket == submarket)
    
    if bedrooms is not None:
        query = query.filter(Property.bedrooms == bedrooms)
    
    if sort_by.lower() == "price":
        query = query.order_by(Property.current_rent.asc() if sort_order == "asc" else Property.current_rent.desc())
    elif sort_by.lower() == "occupancy":
        query = query.order_by(Property.occupancy_rate.asc() if sort_order == "asc" else Property.occupancy_rate.desc())
    elif sort_by.lower() == "bedrooms":
        query = query.order_by(Property.bedrooms.asc() if sort_order == "asc" else Property.bedrooms.desc())
    else:
        query = query.order_by(Property.current_rent.asc())
    
    total = query.count()
    properties = query.offset((page - 1) * page_size).limit(page_size).all()
    
    return {"total": total, "properties": properties}

@app.post("/api/properties")
async def add_property(dto: PropertyDto, db: Session = Depends(get_db)):
    property = Property(**dto.dict())
    db.add(property)
    db.commit()
    db.refresh(property)
    return property

@app.get("/api/properties/recommendations/{property_id}")
async def get_price_recommendation(property_id: int, db: Session = Depends(get_db)):
    property = db.query(Property).filter(Property.property_id == property_id).first()
    if not property:
        raise HTTPException(status_code=404, detail="Property not found")
    
    config = PricingConfig()
    recommendation = await generate_price_recommendation(property, db, config)
    return recommendation

async def generate_price_recommendation(property: Property, db: Session, config: PricingConfig):
    peers = db.query(PeerProperty).filter(PeerProperty.property_id == property.property_id).all()
    
    market_trend = calculate_market_trend(peers, db)
    occupancy_adjustment = calculate_occupancy_adjustment(property)
    peer_rent_adjustment = calculate_peer_rent_adjustment(peers, property)
    
    base_rent = property.current_rent
    recommended_rent = base_rent * (
        config.weight_market_trend * market_trend +
        config.weight_occupancy * occupancy_adjustment +
        config.weight_peer_rent * peer_rent_adjustment
    )
    
    recommended_rent = max(
        base_rent * config.min_rent_multiplier,
        min(recommended_rent, base_rent * config.max_rent_multiplier)
    )
    
    is_auto_accepted = check_auto_accept(base_rent, recommended_rent, config)
    lease_expirations = await manage_lease_expirations(property, db)
    
    return PriceRecommendation(
        property_id=property.property_id,
        recommended_rent=round(recommended_rent, 2),
        base_rent=base_rent,
        is_auto_accepted=is_auto_accepted,
        lease_expiration_adjustments=lease_expirations,
        market_trend_factor=market_trend,
        occupancy_factor=occupancy_adjustment,
        peer_rent_factor=peer_rent_adjustment
    )

def calculate_market_trend(peers: List[PeerProperty], db: Session):
    if not peers:
        return 1.0
    
    avg_peer_rent_change = sum(
        pp.peer_rent / db.query(Property.current_rent)
            .filter(Property.submarket == pp.peer_submarket)
            .scalar()
        for pp in peers
    ) / len(peers)
    
    return 1.02 if avg_peer_rent_change > 1.0 else 0.98 if avg_peer_rent_change < 1.0 else 1.0

def calculate_occupancy_adjustment(property: Property):
    target_occupancy = 0.95
    return 0.95 if property.occupancy_rate < target_occupancy else 1.05 if property.occupancy_rate > target_occupancy else 1.0

def calculate_peer_rent_adjustment(peers: List[PeerProperty], property: Property):
    if not peers:
        return 1.0
    
    avg_peer_rent = sum(pp.peer_rent for pp in peers) / len(peers)
    rent_ratio = avg_peer_rent / property.current_rent
    return 1.03 if rent_ratio > 1.0 else 0.97 if rent_ratio < 1.0 else 1.0

def check_auto_accept(base_rent: float, recommended_rent: float, config: PricingConfig):
    daily_change = abs((recommended_rent - base_rent) / base_rent)
    weekly_change = daily_change * 7
    return daily_change <= config.auto_accept_threshold_daily and weekly_change <= config.auto_accept_threshold_weekly

async def manage_lease_expirations(property: Property, db: Session):
    leases = db.query(Lease).filter(Lease.property_id == property.property_id).all()
    future_supply = {}
    
    for lease in leases:
        expiration_month = (lease.start_date.month + lease.term_months - 1) % 12 + 1
        future_supply[expiration_month] = future_supply.get(expiration_month, 0) + 1
    
    expirations = {}
    for month in range(1, 13):
        supply = future_supply.get(month, 0)
        adjustment = 1.05 if supply > 5 else 0.95 if supply < 2 else 1.0
        expirations[month] = adjustment
    
    return expirations

@app.post("/api/bookings")
async def add_booking(dto: BookingDto, db: Session = Depends(get_db)):
    property = db.query(Property).filter(Property.property_id == dto.property_id).first()
    
    if not property or property.available_units <= 0:
        raise HTTPException(status_code=400, detail="Property not available")
    
    booking = Booking(
        user_id=dto.user_id,
        property_id=dto.property_id,
        booking_date=datetime.utcnow(),
        status="Pending"
    )
    
    property.available_units -= 1
    db.add(booking)
    db.commit()
    db.refresh(booking)
    return booking

@app.get("/api/bookings/user/{user_id}")
async def get_user_bookings(user_id: int, db: Session = Depends(get_db)):
    bookings = db.query(Booking).filter(Booking.user_id == user_id).all()
    return bookings

@app.put("/api/bookings/{booking_id}/confirm")
async def confirm_booking(booking_id: int, db: Session = Depends(get_db)):
    booking = db.query(Booking).filter(Booking.booking_id == booking_id).first()
    if not booking:
        raise HTTPException(status_code=404, detail="Booking not found")
    
    booking.status = "Confirmed"
    db.commit()
    db.refresh(booking)
    return booking

@app.delete("/api/bookings/{booking_id}")
async def cancel_booking(booking_id: int, db: Session = Depends(get_db)):
    booking = db.query(Booking).filter(Booking.booking_id == booking_id).first()
    if not booking:
        raise HTTPException(status_code=404, detail="Booking not found")
    
    property = db.query(Property).filter(Property.property_id == booking.property_id).first()
    if property:
        property.available_units += 1
    
    db.delete(booking)
    db.commit()
    return {"status": "success"}

@app.post("/api/leases")
async def add_lease(dto: LeaseDto, db: Session = Depends(get_db)):
    lease = Lease(**dto.dict())
    db.add(lease)
    db.commit()
    db.refresh(lease)
    return lease

@app.get("/api/leases/property/{property_id}")
async def get_property_leases(property_id: int, db: Session = Depends(get_db)):
    leases = db.query(Lease).filter(Lease.property_id == property_id).all()
    return leases

@app.post("/api/peer_properties")
async def add_peer_property(dto: PeerPropertyDto, db: Session = Depends(get_db)):
    peer = PeerProperty(**dto.dict())
    db.add(peer)
    db.commit()
    db.refresh(peer)
    return peer

@app.get("/api/peer_properties/property/{property_id}")
async def get_peer_properties(property_id: int, db: Session = Depends(get_db)):
    peers = db.query(PeerProperty).filter(PeerProperty.property_id == property_id).all()
    return peers