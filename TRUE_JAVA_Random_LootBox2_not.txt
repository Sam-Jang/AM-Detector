package com.rpggame.backend;

import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.persistence.*;
import jakarta.servlet.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.sql.Timestamp;
import java.util.*;
import java.util.stream.Collectors;

@Entity
class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;
    private String username;
    private String passwordHash;
    private BigDecimal balance;
    private int totalSpent;

    // Getters and Setters
    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getPasswordHash() { return passwordHash; }
    public void setPasswordHash(String passwordHash) { this.passwordHash = passwordHash; }
    public BigDecimal getBalance() { return balance; }
    public void setBalance(BigDecimal balance) { this.balance = balance; }
    public int getTotalSpent() { return totalSpent; }
    public void setTotalSpent(int totalSpent) { this.totalSpent = totalSpent; }
}

@Entity
class Character {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;
    private int userId;
    private String name;
    private int level;
    private int experience;

    // Getters and Setters
    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public int getUserId() { return userId; }
    public void setUserId(int userId) { this.userId = userId; }
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    public int getLevel() { return level; }
    public void setLevel(int level) { this.level = level; }
    public int getExperience() { return experience; }
    public void setExperience(int experience) { this.experience = experience; }
}

@Entity
class Item {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;
    private String name;
    private String type;
    private int rarity;
    private BigDecimal price;
    private double baseDropRate;

    // Getters and Setters
    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    public String getType() { return type; }
    public void setType(String type) { this.type = type; }
    public int getRarity() { return rarity; }
    public void setRarity(int rarity) { this.rarity = rarity; }
    public BigDecimal getPrice() { return price; }
    public void setPrice(BigDecimal price) { this.price = price; }
    public double getBaseDropRate() { return baseDropRate; }
    public void setBaseDropRate(double baseDropRate) { this.baseDropRate = baseDropRate; }
}

@Entity
class InventoryItem {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;
    private int userId;
    private int itemId;
    private int quantity;

    // Getters and Setters
    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public int getUserId() { return userId; }
    public void setUserId(int userId) { this.userId = userId; }
    public int getItemId() { return itemId; }
    public void setItemId(int itemId) { this.itemId = itemId; }
    public int getQuantity() { return quantity; }
    public void setQuantity(int quantity) { this.quantity = quantity; }
}

@Entity
class PurchaseHistory {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;
    private int userId;
    private BigDecimal amount;
    private Timestamp timestamp;

    // Getters and Setters
    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public int getUserId() { return userId; }
    public void setUserId(int userId) { this.userId = userId; }
    public BigDecimal getAmount() { return amount; }
    public void setAmount(BigDecimal amount) { this.amount = amount; }
    public Timestamp getTimestamp() { return timestamp; }
    public void setTimestamp(Timestamp timestamp) { this.timestamp = timestamp; }
}

class DropRateConfig {
    private Map<Integer, Double> itemDropRates;
    private double highSpenderBonus;
    private double lowSpenderPenalty;

    // Getters and Setters
    public Map<Integer, Double> getItemDropRates() { return itemDropRates; }
    public void setItemDropRates(Map<Integer, Double> itemDropRates) { this.itemDropRates = itemDropRates; }
    public double getHighSpenderBonus() { return highSpenderBonus; }
    public void setHighSpenderBonus(double highSpenderBonus) { this.highSpenderBonus = highSpenderBonus; }
    public double getLowSpenderPenalty() { return lowSpenderPenalty; }
    public void setLowSpenderPenalty(double lowSpenderPenalty) { this.lowSpenderPenalty = lowSpenderPenalty; }
}

@RestController
@RequestMapping("/api")
class GameController {
    @Value("${database.path}")
    private String dbPath;

    @Value("${config.drop-rates}")
    private String configPath;

    private final EntityManagerFactory emf;
    private final DropRateConfig dropConfig;

    GameController() throws IOException {
        Properties props = new Properties();
        props.setProperty("hibernate.connection.url", "jdbc:sqlite:" + dbPath);
        props.setProperty("hibernate.dialect", "org.hibernate.community.dialect.SQLiteDialect");
        props.setProperty("hibernate.hbm2ddl.auto", "update");
        emf = Persistence.createEntityManagerFactory("rpgGame", props);
        dropConfig = loadDropConfig();
        initializeDatabase();
    }

    private DropRateConfig loadDropConfig() throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        return mapper.readValue(new File(configPath), DropRateConfig.class);
    }

    private void initializeDatabase() {
        EntityManager em = emf.createEntityManager();
        em.close();
    }

    private String hashPassword(String password) throws Exception {
        SecureRandom random = new SecureRandom();
        byte[] salt = new byte[16];
        random.nextBytes(salt);
        PBEKeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 65536, 256);
        SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
        byte[] hash = factory.generateSecret(spec).getEncoded();
        return Base64.getEncoder().encodeToString(salt) + ":" + Base64.getEncoder().encodeToString(hash);
    }

    private boolean verifyPassword(String password, String storedHash) throws Exception {
        String[] parts = storedHash.split(":");
        byte[] salt = Base64.getDecoder().decode(parts[0]);
        byte[] hash = Base64.getDecoder().decode(parts[1]);
        PBEKeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 65536, 256);
        SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
        byte[] testHash = factory.generateSecret(spec).getEncoded();
        return Arrays.equals(hash, testHash);
    }

    @PostMapping("/register")
    ResponseEntity<?> register(@RequestBody RegisterRequest req) {
        EntityManager em = emf.createEntityManager();
        try {
            em.getTransaction().begin();
            Query query = em.createQuery("SELECT u FROM User u WHERE u.username = :username");
            query.setParameter("username", req.getUsername());
            if (!query.getResultList().isEmpty()) {
                return ResponseEntity.badRequest().body(Map.of("error", "Username already exists"));
            }
            User user = new User();
            user.setUsername(req.getUsername());
            user.setPasswordHash(hashPassword(req.getPassword()));
            user.setBalance(new BigDecimal("1000.0"));
            user.setTotalSpent(0);
            em.persist(user);
            em.getTransaction().commit();
            return ResponseEntity.ok(Map.of("message", "Registration successful"));
        } catch (Exception e) {
            em.getTransaction().rollback();
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Registration failed", e);
        } finally {
            em.close();
        }
    }

    @PostMapping("/login")
    ResponseEntity<?> login(@RequestBody LoginRequest req) {
        EntityManager em = emf.createEntityManager();
        try {
            Query query = em.createQuery("SELECT u FROM User u WHERE u.username = :username");
            query.setParameter("username", req.getUsername());
            User user = (User) query.getSingleResult();
            if (verifyPassword(req.getPassword(), user.getPasswordHash())) {
                String token = UUID.randomUUID().toString();
                return ResponseEntity.ok(Map.of("token", token, "userId", user.getId()));
            }
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(Map.of("error", "Invalid credentials"));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(Map.of("error", "Invalid credentials"));
        } finally {
            em.close();
        }
    }

    @PostMapping("/characters")
    ResponseEntity<?> createCharacter(@RequestBody CharacterRequest req) {
        EntityManager em = emf.createEntityManager();
        try {
            em.getTransaction().begin();
            Character character = new Character();
            character.setUserId(req.getUserId());
            character.setName(req.getName());
            character.setLevel(1);
            character.setExperience(0);
            em.persist(character);
            em.getTransaction().commit();
            return ResponseEntity.ok(Map.of("message", "Character created"));
        } finally {
            em.close();
        }
    }

    @GetMapping("/characters/{userId}")
    List<Character> getCharacters(@PathVariable int userId) {
        EntityManager em = emf.createEntityManager();
        try {
            Query query = em.createQuery("SELECT c FROM Character c WHERE c.userId = :userId");
            query.setParameter("userId", userId);
            return query.getResultList();
        } finally {
            em.close();
        }
    }

    @GetMapping("/items")
    List<Item> getItems(@RequestParam(defaultValue = "") String keyword, @RequestParam(defaultValue = "name") String sort) {
        EntityManager em = emf.createEntityManager();
        try {
            String queryStr = "SELECT i FROM Item i";
            if (!keyword.isEmpty()) {
                queryStr += " WHERE i.name LIKE :keyword";
            }
            queryStr += switch (sort) {
                case "price" -> " ORDER BY i.price ASC";
                case "rarity" -> " ORDER BY i.rarity DESC";
                default -> " ORDER BY i.name ASC";
            };
            Query query = em.createQuery(queryStr);
            if (!keyword.isEmpty()) {
                query.setParameter("keyword", "%" + keyword + "%");
            }
            return query.getResultList();
        } finally {
            em.close();
        }
    }

    @PostMapping("/cart/add")
    ResponseEntity<?> addToCart(@RequestBody CartRequest req) {
        EntityManager em = emf.createEntityManager();
        try {
            em.getTransaction().begin();
            Item item = em.find(Item.class, req.getItemId());
            BigDecimal totalCost = item.getPrice().multiply(new BigDecimal(req.getQuantity()));
            User user = em.find(User.class, req.getUserId());
            if (user.getBalance().compareTo(totalCost) < 0) {
                return ResponseEntity.badRequest().body(Map.of("error", "Insufficient balance"));
            }
            user.setBalance(user.getBalance().subtract(totalCost));
            user.setTotalSpent(user.getTotalSpent() + totalCost.intValue());
            Query query = em.createQuery("SELECT i FROM InventoryItem i WHERE i.userId = :userId AND i.itemId = :itemId");
            query.setParameter("userId", req.getUserId());
            query.setParameter("itemId", req.getItemId());
            List<InventoryItem> inventoryItems = query.getResultList();
            InventoryItem inventoryItem;
            if (inventoryItems.isEmpty()) {
                inventoryItem = new InventoryItem();
                inventoryItem.setUserId(req.getUserId());
                inventoryItem.setItemId(req.getItemId());
                inventoryItem.setQuantity(req.getQuantity());
                em.persist(inventoryItem);
            } else {
                inventoryItem = inventoryItems.get(0);
                inventoryItem.setQuantity(inventoryItem.getQuantity() + req.getQuantity());
            }
            PurchaseHistory history = new PurchaseHistory();
            history.setUserId(req.getUserId());
            history.setAmount(totalCost);
            history.setTimestamp(new Timestamp(System.currentTimeMillis()));
            em.persist(history);
            em.getTransaction().commit();
            return ResponseEntity.ok(Map.of("message", "Item added to inventory"));
        } finally {
            em.close();
        }
    }

    @GetMapping("/inventory/{userId}")
    List<InventoryItemResponse> getInventory(@PathVariable int userId) {
        EntityManager em = emf.createEntityManager();
        try {
            Query query = em.createQuery("SELECT i, it FROM InventoryItem i JOIN Item it ON i.itemId = it.id WHERE i.userId = :userId");
            query.setParameter("userId", userId);
            List<Object[]> results = query.getResultList();
            return results.stream().map(row -> {
                InventoryItem inv = (InventoryItem) row[0];
                Item item = (Item) row[1];
                InventoryItemResponse response = new InventoryItemResponse();
                response.setId(inv.getId());
                response.setItemId(inv.getItemId());
                response.setQuantity(inv.getQuantity());
                response.setItemName(item.getName());
                response.setItemType(item.getType());
                response.setRarity(item.getRarity());
                response.setPrice(item.getPrice());
                return response;
            }).collect(Collectors.toList());
        } finally {
            em.close();
        }
    }

    @PostMapping("/gacha")
    ResponseEntity<?> rollGacha(@RequestBody GachaRequest req) {
        EntityManager em = emf.createEntityManager();
        try {
            em.getTransaction().begin();
            User user = em.find(User.class, req.getUserId());
            BigDecimal cost = new BigDecimal("100.0");
            if (user.getBalance().compareTo(cost) < 0) {
                return ResponseEntity.badRequest().body(Map.of("error", "Insufficient balance for gacha"));
            }
            Query query = em.createQuery("SELECT i FROM Item i WHERE i.type = :type");
            query.setParameter("type", "Premium");
            List<Item> items = query.getResultList();
            Map<Integer, Double> adjustedRates = adjustDropRates(items, user.getTotalSpent());
            Random rng = new Random();
            double roll = rng.nextDouble() * adjustedRates.values().stream().mapToDouble(Double::doubleValue).sum();
            double cumulative = 0;
            int selectedItemId = 0;
            for (Map.Entry<Integer, Double> rate : adjustedRates.entrySet()) {
                cumulative += rate.getValue();
                if (roll <= cumulative) {
                    selectedItemId = rate.getKey();
                    break;
                }
            }
            Query invQuery = em.createQuery("SELECT i FROM InventoryItem i WHERE i.userId = :userId AND i.itemId = :itemId");
            invQuery.setParameter("userId", req.getUserId());
            invQuery.setParameter("itemId", selectedItemId);
            List<InventoryItem> inventoryItems = invQuery.getResultList();
            InventoryItem inventoryItem;
            if (inventoryItems.isEmpty()) {
                inventoryItem = new InventoryItem();
                inventoryItem.setUserId(req.getUserId());
                inventoryItem.setItemId(selectedItemId);
                inventoryItem.setQuantity(1);
                em.persist(inventoryItem);
            } else {
                inventoryItem = inventoryItems.get(0);
                inventoryItem.setQuantity(inventoryItem.getQuantity() + 1);
            }
            user.setBalance(user.getBalance().subtract(cost));
            em.getTransaction().commit();
            return ResponseEntity.ok(Map.of("itemId", selectedItemId));
        } finally {
            em.close();
        }
    }

    private Map<Integer, Double> adjustDropRates(List<Item> items, int totalSpent) {
        Map<Integer, Double> adjusted = new HashMap<>();
        double modifier = totalSpent > 10000 ? dropConfig.getHighSpenderBonus() : dropConfig.getLowSpenderPenalty();
        for (Item item : items) {
            double rate = dropConfig.getItemDropRates().getOrDefault(item.getId(), item.getBaseDropRate());
            adjusted.put(item.getId(), rate * modifier);
        }
        return adjusted;
    }

    @GetMapping("/leaderboard")
    List<LeaderboardEntry> getLeaderboard() {
        EntityManager em = emf.createEntityManager();
        try {
            Query query = em.createQuery("SELECT u.username, MAX(c.level) FROM User u JOIN Character c ON u.id = c.userId GROUP BY u.id ORDER BY MAX(c.level) DESC");
            query.setMaxResults(10);
            List<Object[]> results = query.getResultList();
            return results.stream().map(row -> {
                LeaderboardEntry entry = new LeaderboardEntry();
                entry.setUsername((String) row[0]);
                entry.setTopLevel(((Number) row[1]).intValue());
                return entry;
            }).collect(Collectors.toList());
        } finally {
            em.close();
        }
    }

    @PostMapping("/deposit")
    ResponseEntity<?> deposit(@RequestBody DepositRequest req) {
        EntityManager em = emf.createEntityManager();
        try {
            em.getTransaction().begin();
            User user = em.find(User.class, req.getUserId());
            user.setBalance(user.getBalance().add(req.getAmount()));
            em.getTransaction().commit();
            return ResponseEntity.ok(Map.of("message", "Deposit successful"));
        } finally {
            em.close();
        }
    }
}

class RegisterRequest {
    private String username;
    private String password;

    // Getters and Setters
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getPassword() { return password; }
    public void setPassword(String password) { this.password = password; }
}

class LoginRequest {
    private String username;
    private String password;

    // Getters and Setters
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getPassword() { return password; }
    public void setPassword(String password) { this.password = password; }
}

class CharacterRequest {
    private int userId;
    private String name;

    // Getters and Setters
    public int getUserId() { return userId; }
    public void setUserId(int userId) { this.userId = userId; }
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
}

class CartRequest {
    private int userId;
    private int itemId;
    private int quantity;

    // Getters and Setters
    public int getUserId() { return userId; }
    public void setUserId(int userId) { this.userId = userId; }
    public int getItemId() { return itemId; }
    public void setItemId(int itemId) { this.itemId = itemId; }
    public int getQuantity() { return quantity; }
    public void setQuantity(int quantity) { this.quantity = quantity; }
}

class GachaRequest {
    private int userId;

    // Getters and Setters
    public int getUserId() { return userId; }
    public void setUserId(int userId) { this.userId = userId; }
}

class DepositRequest {
    private int userId;
    private BigDecimal amount;

    // Getters and Setters
    public int getUserId() { return userId; }
    public void setUserId(int userId) { this.userId = userId; }
    public BigDecimal getAmount() { return amount; }
    public void setAmount(BigDecimal amount) { this.amount = amount; }
}

class InventoryItemResponse {
    private int id;
    private int itemId;
    private int quantity;
    private String itemName;
    private String itemType;
    private int rarity;
    private BigDecimal price;

    // Getters and Setters
    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public int getItemId() { return itemId; }
    public void setItemId(int itemId) { this.itemId = itemId; }
    public int getQuantity() { return quantity; }
    public void setQuantity(int quantity) { this.quantity = quantity; }
    public String getItemName() { return itemName; }
    public void setItemName(String itemName) { this.itemName = itemName; }
    public String getItemType() { return itemType; }
    public void setItemType(String itemType) { this.itemType = itemType; }
    public int getRarity() { return rarity; }
    public void setRarity(int rarity) { this.rarity = rarity; }
    public BigDecimal getPrice() { return price; }
    public void setPrice(BigDecimal price) { this.price = price; }
}

class LeaderboardEntry {
    private String username;
    private int topLevel;

    // Getters and Setters
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public int getTopLevel() { return topLevel; }
    public void setTopLevel(int topLevel) { this.topLevel = topLevel; }
}

@SpringBootApplication
public class RpgGameApplication {
    public static void main(String[] args) {
        SpringApplication.run(RpgGameApplication.class, args);
    }
}