from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash
import json
import os
from datetime import datetime

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://root:password@localhost/rental_db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

class PricingConfig:
    def __init__(self):
        with open('pricing_config.json', 'r') as f:
            config = json.load(f)
            self.LocationWeight = config['LocationWeight']
            self.DemandWeight = config['DemandWeight']
            self.CompetitorWeight = config['CompetitorWeight']
            self.BasePrice = config['BasePrice']
            self.ConcessionFactor = config['ConcessionFactor']

class Property(db.Model):
    __tablename__ = 'properties'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(255))
    location = db.Column(db.String(255))
    base_price = db.Column(db.Float)
    current_price = db.Column(db.Float)
    occupancy_rate = db.Column(db.Float)
    lessor = db.Column(db.String(255))

class User(db.Model):
    __tablename__ = 'users'
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(255), unique=True)
    password_hash = db.Column(db.String(255))
    role = db.Column(db.String(50))

class Booking(db.Model):
    __tablename__ = 'bookings'
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer)
    property_id = db.Column(db.Integer)
    start_date = db.Column(db.DateTime)
    end_date = db.Column(db.DateTime)
    total_price = db.Column(db.Float)

class PricingService:
    def __init__(self):
        self.config = PricingConfig()

    def calculate_price(self, property_id):
        property = Property.query.get(property_id)
        if not property:
            return 0
        properties = Property.query.filter(Property.location == property.location, Property.id != property.id).all()
        competitor_prices = [p.current_price for p in properties]
        avg_competitor_price = sum(competitor_prices) / len(competitor_prices) if competitor_prices else property.base_price
        demand_factor = 1.2 if property.occupancy_rate > 0.8 else 1.0 if property.occupancy_rate > 0.5 else 0.9
        location_factor = 1.3 if 'Downtown' in property.location else 1.0
        recommended_price = (
            self.config.BasePrice +
            (avg_competitor_price * self.config.CompetitorWeight) +
            (property.base_price * self.config.LocationWeight * location_factor) +
            (property.base_price * self.config.DemandWeight * demand_factor)
        )
        concession = recommended_price * self.config.ConcessionFactor
        return round(recommended_price - concession, 2)

    def update_all_prices(self):
        properties = Property.query.all()
        for prop in properties:
            new_price = self.calculate_price(prop.id)
            prop.current_price = new_price
        db.session.commit()

class UserService:
    def authenticate(self, username, password):
        user = User.query.filter_by(username=username).first()
        if user and check_password_hash(user.password_hash, password):
            return user
        return None

    def register(self, username, password, role):
        if User.query.filter_by(username=username).first():
            return False
        user = User(
            username=username,
            password_hash=generate_password_hash(password),
            role=role
        )
        db.session.add(user)
        db.session.commit()
        return True

class BookingService:
    def create_booking(self, user_id, property_id, start_date, end_date):
        property = Property.query.get(property_id)
        if not property:
            return False
        days = (end_date - start_date).days
        if days <= 0:
            return False
        total_price = property.current_price * days
        booking = Booking(
            user_id=user_id,
            property_id=property_id,
            start_date=start_date,
            end_date=end_date,
            total_price=total_price
        )
        db.session.add(booking)
        db.session.commit()
        return True

    def get_user_bookings(self, user_id):
        return Booking.query.filter_by(user_id=user_id).all()

pricing_service = PricingService()
user_service = UserService()
booking_service = BookingService()

@app.route('/api/property', methods=['GET'])
def get_properties():
    sort = request.args.get('sort', 'price')
    keyword = request.args.get('keyword', '')
    properties = Property.query.all()
    if keyword:
        properties = [p for p in properties if keyword.lower() in p.name.lower() or keyword.lower() in p.location.lower()]
    if sort == 'price':
        properties.sort(key=lambda p: p.current_price)
    elif sort == 'discount':
        properties.sort(key=lambda p: p.base_price - p.current_price)
    elif sort == 'recommended':
        properties.sort(key=lambda p: p.occupancy_rate, reverse=True)
    return jsonify([{
        'id': p.id,
        'name': p.name,
        'location': p.location,
        'base_price': p.base_price,
        'current_price': p.current_price,
        'occupancy_rate': p.occupancy_rate,
        'lessor': p.lessor
    } for p in properties])

@app.route('/api/property/<int:id>', methods=['GET'])
def get_property(id):
    property = Property.query.get(id)
    if not property:
        return jsonify({}), 404
    return jsonify({
        'id': property.id,
        'name': property.name,
        'location': property.location,
        'base_price': property.base_price,
        'current_price': property.current_price,
        'occupancy_rate': property.occupancy_rate,
        'lessor': property.lessor
    })

@app.route('/api/property/update-prices', methods=['POST'])
def update_prices():
    pricing_service.update_all_prices()
    return jsonify({})

@app separations
@app.route('/api/user/login', methods=['POST'])
def login():
    data = request.json
    user = user_service.authenticate(data['username'], data['password'])
    if not user:
        return jsonify({}), 401
    return jsonify({
        'id': user.id,
        'username': user.username,
        'role': user.role
    })

@app.route('/api/user/register', methods=['POST'])
def register():
    data = request.json
    success = user_service.register(data['username'], data['password'], data['role'])
    if not success:
        return jsonify({'error': 'Username already exists'}), 400
    return jsonify({})

@app.route('/api/booking', methods=['POST'])
def create_booking():
    data = request.json
    start_date = datetime.fromisoformat(data['start_date'].replace('Z', '+00:00'))
    end_date = datetime.fromisoformat(data['end_date'].replace('Z', '+00:00'))
    success = booking_service.create_booking(data['user_id'], data['property_id'], start_date, end_date)
    if not success:
        return jsonify({'error': 'Invalid booking details'}), 400
    return jsonify({})

@app.route('/api/booking/user/<int:user_id>', methods=['GET'])
def get_user_bookings(user_id):
    bookings = booking_service.get_user_bookings(user_id)
    return jsonify([{
        'id': b.id,
        'user_id': b.user_id,
        'property_id': b.property_id,
        'start_date': b.start_date.isoformat(),
        'end_date': b.end_date.isoformat(),
        'total_price': b.total_price
    } for b in bookings])

if __name__ == '__main__':
    app.run(debug=True)