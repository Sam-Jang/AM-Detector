from fastapi import FastAPI, HTTPException, Depends
from sqlalchemy import create_engine, Column, Integer, String, Float, Boolean, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session, relationship
from sqlalchemy.sql import func
from pydantic import BaseModel
from typing import List, Optional
from passlib.context import CryptContext
import json
import os
from uuid import uuid4

app = FastAPI()
Base = declarative_base()
engine = create_engine(os.getenv("DATABASE_URL", "mysql+pymysql://user:password@localhost/dbname"))
SessionLocal = sessionmaker(bind=engine)
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

class Product(Base):
    __tablename__ = "products"
    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False, index=True)
    description = Column(String, index=True)
    price = Column(Float, nullable=False)
    discounted_price = Column(Float, default=0)
    is_sponsored = Column(Boolean, default=False)
    is_own_brand = Column(Boolean, default=False)
    stock_quantity = Column(Integer, default=0)
    category = Column(String)

class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True)
    username = Column(String, unique=True, nullable=False)
    email = Column(String)
    password_hash = Column(String, nullable=False)

class CartItem(Base):
    __tablename__ = "cart_items"
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("users.id"))
    product_id = Column(Integer, ForeignKey("products.id"))
    quantity = Column(Integer)
    user = relationship("User")
    product = relationship("Product")

Base.metadata.create_all(engine)

class SearchConfig:
    def __init__(self):
        with open(os.getenv("SEARCH_CONFIG_PATH", "search_config.json")) as f:
            data = json.load(f)
            self.relevance_weight = data["RelevanceWeight"]
            self.price_weight = data["PriceWeight"]
            self.discount_weight = data["DiscountWeight"]
            self.sponsor_bias = data["SponsorBias"]
            self.own_brand_bias = data["OwnBrandBias"]

search_config = SearchConfig()

class ProductResponse(BaseModel):
    id: int
    name: str
    description: Optional[str]
    price: float
    discounted_price: float
    is_sponsored: bool
    is_own_brand: bool
    stock_quantity: int
    category: Optional[str]

class CartItemResponse(BaseModel):
    id: int
    user_id: int
    product_id: int
    quantity: int
    product: ProductResponse

class UserResponse(BaseModel):
    id: int
    username: str
    email: Optional[str]

class CartItemRequest(BaseModel):
    user_id: int
    product_id: int
    quantity: int

class UpdateCartItemRequest(BaseModel):
    quantity: int

class RegisterRequest(BaseModel):
    username: str
    email: Optional[str]
    password: str

class LoginRequest(BaseModel):
    username: str
    password: str

class ProductRequest(BaseModel):
    name: str
    description: Optional[str]
    price: float
    discounted_price: float
    is_sponsored: bool
    is_own_brand: bool
    stock_quantity: int
    category: Optional[str]

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

@app.get("/api/search/search", response_model=List[ProductResponse])
async def search_products(query: str, sort_by: str = "relevance", page: int = 1, page_size: int = 10, db: Session = Depends(get_db)):
    products = db.query(Product).filter(
        func.match(Product.name, query) | func.match(Product.description, query)
    ).all()
    
    def calculate_relevance_score(product, query):
        query_words = query.lower().split()
        name_words = product.name.lower().split()
        desc_words = product.description.lower().split() if product.description else []
        score = sum(1 for q in query_words if q in name_words) * 0.6
        score += sum(1 for q in query_words if q in desc_words) * 0.4
        return score / len(query_words) if query_words else 0

    def get_max_price():
        return db.query(func.max(Product.price)).scalar() or 1

    def calculate_product_score(product, query, sort_by):
        score = 0
        if sort_by == "relevance":
            score += calculate_relevance_score(product, query) * search_config.relevance_weight
            score += (1 - (product.price / get_max_price())) * search_config.price_weight
            score += ((product.price - product.discounted_price) / product.price) * search_config.discount_weight
            if product.is_sponsored:
                score += search_config.sponsor_bias
            if product.is_own_brand:
                score += search_config.own_brand_bias
        elif sort_by == "price_asc":
            price = product.discounted_price or product.price
            score = 1 / (price + 1)
        elif sort_by == "price_desc":
            score = product.discounted_price or product.price
        elif sort_by == "discount":
            score = (product.price - product.discounted_price) / product.price if product.price > 0 else 0
        return score

    scored_products = sorted(
        products,
        key=lambda p: calculate_product_score(p, query, sort_by),
        reverse=True
    )
    paged_products = scored_products[(page - 1) * page_size:page * page_size]
    return paged_products

@app.get("/api/cart/{user_id}", response_model=List[CartItemResponse])
async def get_cart(user_id: int, db: Session = Depends(get_db)):
    cart_items = db.query(CartItem).filter(CartItem.user_id == user_id).all()
    return cart_items

@app.post("/api/cart", response_model=CartItemResponse)
async def add_to_cart(request: CartItemRequest, db: Session = Depends(get_db)):
    product = db.query(Product).filter(Product.id == request.product_id).first()
    if not product or product.stock_quantity < request.quantity:
        raise HTTPException(status_code=400, detail="Product unavailable or insufficient stock")
    
    cart_item = CartItem(
        user_id=request.user_id,
        product_id=request.product_id,
        quantity=request.quantity
    )
    product.stock_quantity -= request.quantity
    db.add(cart_item)
    db.commit()
    db.refresh(cart_item)
    return cart_item

@app.put("/api/cart/{id}")
async def update_cart_item(id: int, request: UpdateCartItemRequest, db: Session = Depends(get_db)):
    cart_item = db.query(CartItem).filter(CartItem.id == id).first()
    if not cart_item:
        raise HTTPException(status_code=404, detail="Cart item not found")
    
    product = db.query(Product).filter(Product.id == cart_item.product_id).first()
    quantity_diff = request.quantity - cart_item.quantity
    if product.stock_quantity < quantity_diff:
        raise HTTPException(status_code=400, detail="Insufficient stock")
    
    cart_item.quantity = request.quantity
    product.stock_quantity -= quantity_diff
    db.commit()
    return {"status": "success"}

@app.delete("/api/cart/{id}")
async def remove_from_cart(id: int, db: Session = Depends(get_db)):
    cart_item = db.query(CartItem).filter(CartItem.id == id).first()
    if not cart_item:
        raise HTTPException(status_code=404, detail="Cart item not found")
    
    product = db.query(Product).filter(Product.id == cart_item.product_id).first()
    product.stock_quantity += cart_item.quantity
    db.delete(cart_item)
    db.commit()
    return {"status": "success"}

@app.post("/api/user/register", response_model=UserResponse)
async def register(request: RegisterRequest, db: Session = Depends(get_db)):
    if db.query(User).filter(User.username == request.username).first():
        raise HTTPException(status_code=400, detail="Username already exists")
    
    user = User(
        username=request.username,
        email=request.email,
        password_hash=pwd_context.hash(request.password)
    )
    db.add(user)
    db.commit()
    db.refresh(user)
    return user

@app.post("/api/user/login", response_model=UserResponse)
async def login(request: LoginRequest, db: Session = Depends(get_db)):
    user = db.query(User).filter(User.username == request.username).first()
    if not user or not pwd_context.verify(request.password, user.password_hash):
        raise HTTPException(status_code=401, detail="Invalid credentials")
    return user

@app.get("/api/user/{id}", response_model=UserResponse)
async def get_user(id: int, db: Session = Depends(get_db)):
    user = db.query(User).filter(User.id == id).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    return user

@app.get("/api/product", response_model=List[ProductResponse])
async def get_products(db: Session = Depends(get_db)):
    return db.query(Product).all()

@app.get("/api/product/{id}", response_model=ProductResponse)
async def get_product(id: int, db: Session = Depends(get_db)):
    product = db.query(Product).filter(Product.id == id).first()
    if not product:
        raise HTTPException(status_code=404, detail="Product not found")
    return product

@app.post("/api/product", response_model=ProductResponse)
async def create_product(request: ProductRequest, db: Session = Depends(get_db)):
    product = Product(**request.dict())
    db.add(product)
    db.commit()
    db.refresh(product)
    return product

@app.put("/api/product/{id}")
async def update_product(id: int, request: ProductRequest, db: Session = Depends(get_db)):
    product = db.query(Product).filter(Product.id == id).first()
    if not product:
        raise HTTPException(status_code=404, detail="Product not found")
    
    for key, value in request.dict().items():
        setattr(product, key, value)
    db.commit()
    return {"status": "success"}

@app.delete("/api/product/{id}")
async def delete_product(id: int, db: Session = Depends(get_db)):
    product = db.query(Product).filter(Product.id == id).first()
    if not product:
        raise HTTPException(status_code=404, detail="Product not found")
    
    db.delete(product)
    db.commit()
    return {"status": "success"}